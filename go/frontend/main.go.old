package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"math/rand"
	"net/http"
	"strconv"
	"time"

	pb "github.com/iter8-tools/iter8/abn/grpc"
	"github.com/iter8-tools/iter8/abn/util"
	"github.com/iter8-tools/iter8/base/log"
	iter8abn "github.com/kalantar/ab-example/go/frontend/iter8"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

const (
	BACKEND_NAMESPACE = "default"
	BACKEND_SERVICE   = "backend"
	DEFAULT_TRACK     = "current"

	SAMPLE_METRIC = "sample_metric"
)

func appName() string {
	return BACKEND_NAMESPACE + "/" + BACKEND_SERVICE
}

// Assumes user is specified in a header X-User.
// If not set, a random user name will be assigned.
func user(req *http.Request) string {
	users, ok := req.Header["X-User"]
	if !ok {
		users = []string{util.RandomString(16)}
	}
	return users[0]
}

func getTrack(user string) string {
	track := DEFAULT_TRACK
	if abnService() == nil {
		log.Logger.Warn("ABn service not available -- track is ", track)
		return track
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	s, err := (*abnService()).Lookup(
		ctx,
		&pb.Application{
			Name: appName(),
			User: user,
		},
	)
	if err != nil {
		log.Logger.Error("error -- track is ", track, " -- ", err)
		return track
	}

	track = s.GetTrack()
	log.Logger.Info("track is ", track)
	return track
}

func getBackendURL(user string) string {
	return "http://" + BACKEND_SERVICE + "-" + getTrack(user) + ":8090"
}

func writeMetric(name string, value string, user string) {
	if abnService() == nil {
		log.Logger.Warn("ABn service not available")
		return
	}

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	_, err := (*abnService()).WriteMetric(
		ctx,
		&pb.MetricValue{
			Name:        name,
			Value:       value,
			Application: appName(),
			User:        user,
		},
	)
	if err != nil {
		log.Logger.Error("error writing metric: ", err)
	}
}

// GET version of backend service
func version(w http.ResponseWriter, req *http.Request) {
	user := user(req)
	backendURL := getBackendURL(user)
	log.Logger.Infof("for user '%s', backendURL = %s", user, backendURL)

	resp, err := http.Get(backendURL + "/version")
	if err != nil {
		log.Logger.Info("GET /version failed: ", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Logger.Info("GET /version no data: ", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	fmt.Fprintln(w, string(body))

	writeMetric(SAMPLE_METRIC, strconv.Itoa(rand.Intn(100)), user)
}

func main() {
	http.HandleFunc("/version", version)
	http.ListenAndServe(":8091", nil)
}

// Helper functions

const (
	ABN_SERVICE = "abn:50051"
)

var (
	_abnSvc *pb.ABNClient = nil
)

func abnService() *pb.ABNClient {
	return _abnSvc
}

func init() {
	opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}
	conn, err := grpc.Dial(ABN_SERVICE, opts...)
	if err != nil {
		log.Logger.Error("not able to connect to ABn service: ", err)
		return
	}
	// defer conn.Close()
	client := pb.NewABNClient(conn)
	_abnSvc = &client

	abnService := iter8abn.DefaultABnService{
		AppName:      appName(),
		DefaultTrack: DEFAULT_TRACK,
		Service:      &client,
	}

}

// export FRONTEND_TAG=kalantar/frontend:20220608-1600
// docker build . -f Dockerfile.frontend -t $FRONTEND_TAG
// docker push $FRONTEND_TAG
// >>> edit deploy.yaml
// kubectl apply -f deploy.yaml
