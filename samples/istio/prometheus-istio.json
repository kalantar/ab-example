{
    "uuid": "a6d0c7ec-4357-4965-a97d-ceefb343cb10",
    "lastMigration": 25,
    "name": "Prometheus (copy)",
    "endpointPrefix": "api/v1/",
    "latency": 0,
    "port": 9090,
    "hostname": "0.0.0.0",
    "folders": [],
    "routes": [
      {
        "uuid": "f90397bb-b0e8-4816-b756-66b586ef8958",
        "documentation": "",
        "method": "get",
        "endpoint": "query",
        "responses": [
          {
            "uuid": "ee470505-5060-40aa-8d77-2a2a9058c4c5",
            "body": "{\n  \"response\": \"error-rate\",\n  \"status\":\"success\",\n  \"data\": {\n    \"resultType\": \"vector\",\n    \"result\": [\n      {\n        \"metric\":{},\n        \"value\": [\n          {{ divide (now 'T') 1000 }},\n          \"{{ float 0 0.1 }}\"\n          ]\n      }]\n  }\n}",
            "latency": 0,
            "statusCode": 200,
            "label": "error-rate",
            "headers": [],
            "bodyType": "INLINE",
            "filePath": "",
            "databucketID": "",
            "sendFileAsBody": false,
            "rules": [
              {
                "target": "query",
                "modifier": "query",
                "value": "istio_requests_total",
                "invert": false,
                "operator": "regex"
              },
              {
                "target": "query",
                "modifier": "query",
                "value": "response_code",
                "invert": false,
                "operator": "regex"
              },
              {
                "target": "query",
                "modifier": "query",
                "value": "\\(.*\\).*/.*\\(.*\\)",
                "invert": false,
                "operator": "regex"
              }
            ],
            "rulesOperator": "AND",
            "disableTemplating": false,
            "fallbackTo404": false,
            "default": false
          },
          {
            "uuid": "0db893b6-ac68-4d78-8b68-fdededf954e9",
            "body": "{\n  \"response\": \"error-count\",\n  \"status\":\"success\",\n  \"data\": {\n    \"resultType\": \"vector\",\n    \"result\": [\n      {\n        \"metric\":{},\n        \"value\": [\n          {{ divide (now 'T') 1000 }},\n          \"{{ int 0 10 }}\"\n          ]\n      }]\n  }\n}",
            "latency": 0,
            "statusCode": 200,
            "label": "error-count",
            "headers": [],
            "bodyType": "INLINE",
            "filePath": "",
            "databucketID": "",
            "sendFileAsBody": false,
            "rules": [
              {
                "target": "query",
                "modifier": "query",
                "value": "istio_requests_total",
                "invert": false,
                "operator": "regex"
              },
              {
                "target": "query",
                "modifier": "query",
                "value": "response_code",
                "invert": false,
                "operator": "regex"
              }
            ],
            "rulesOperator": "AND",
            "disableTemplating": false,
            "fallbackTo404": false,
            "default": false
          },
          {
            "uuid": "2ca57122-6984-4037-9a36-8b8c743a3c41",
            "body": "{\n  \"response\": \"latency-mean\",\n  \"status\":\"success\",\n  \"data\": {\n    \"resultType\": \"vector\",\n    \"result\": [\n      {\n        \"metric\":{},\n        \"value\": [\n          {{ divide (now 'T') 1000 }},\n          \"{{ float 0 100 }}\"\n          ]\n      }]\n  }\n}",
            "latency": 0,
            "statusCode": 200,
            "label": "latency-mean",
            "headers": [],
            "bodyType": "INLINE",
            "filePath": "",
            "databucketID": "",
            "sendFileAsBody": false,
            "rules": [
              {
                "target": "query",
                "modifier": "query",
                "value": "istio_request_duration_milliseconds_sum",
                "invert": false,
                "operator": "regex"
              },
              {
                "target": "query",
                "modifier": "query",
                "value": "istio_requests_total",
                "invert": false,
                "operator": "regex"
              },
              {
                "target": "query",
                "modifier": "query",
                "value": "\\(.*\\).*/.*\\(.*\\)",
                "invert": false,
                "operator": "regex"
              }
            ],
            "rulesOperator": "AND",
            "disableTemplating": false,
            "fallbackTo404": false,
            "default": false
          },
          {
            "uuid": "102405cf-de79-4ce0-938a-fca51e575a41",
            "body": "{\n  \"response\": \"request-count\",\n  \"status\":\"success\",\n  \"data\": {\n    \"resultType\": \"vector\",\n    \"result\": [\n      {\n        \"metric\":{},\n        \"value\": [\n          {{ divide (now 'T') 1000 }},\n          \"{{ int 0 100 }}\"\n          ]\n      }]\n  }\n}",
            "latency": 0,
            "statusCode": 200,
            "label": "request-count",
            "headers": [],
            "bodyType": "INLINE",
            "filePath": "",
            "databucketID": "",
            "sendFileAsBody": false,
            "rules": [
              {
                "target": "query",
                "modifier": "query",
                "value": "istio_requests_total",
                "invert": false,
                "operator": "regex"
              }
            ],
            "rulesOperator": "AND",
            "disableTemplating": false,
            "fallbackTo404": false,
            "default": false
          },
          {
            "uuid": "20c2d280-f3e5-46fb-bd98-b8f322783a64",
            "body": "{\n  \"response\": \"latency-p\",\n  \"status\":\"success\",\n  \"data\": {\n    \"resultType\": \"vector\",\n    \"result\": [\n      {\n        \"metric\":{},\n        \"value\": [\n          {{ divide (now 'T') 1000 }},\n          \"{{ float 0 100 }}\"\n          ]\n      }]\n  }\n}",
            "latency": 0,
            "statusCode": 200,
            "label": "latency-p*",
            "headers": [],
            "bodyType": "INLINE",
            "filePath": "",
            "databucketID": "",
            "sendFileAsBody": false,
            "rules": [
              {
                "target": "query",
                "modifier": "query",
                "value": "histogram_quantile",
                "invert": false,
                "operator": "regex"
              },
              {
                "target": "query",
                "modifier": "query",
                "value": "istio_request_duration_milliseconds_bucket",
                "invert": false,
                "operator": "regex"
              }
            ],
            "rulesOperator": "AND",
            "disableTemplating": false,
            "fallbackTo404": false,
            "default": false
          },
          {
            "uuid": "52c2d11d-e292-4e0a-b659-1fd87e946213",
            "body": "{\n  \"response\": \"unable to identify query\"\n}",
            "latency": 0,
            "statusCode": 400,
            "label": "unmatched query",
            "headers": [],
            "bodyType": "INLINE",
            "filePath": "",
            "databucketID": "",
            "sendFileAsBody": false,
            "rules": [],
            "rulesOperator": "OR",
            "disableTemplating": false,
            "fallbackTo404": false,
            "default": true
          }
        ],
        "enabled": true,
        "responseMode": null
      }
    ],
    "rootChildren": [
      {
        "type": "route",
        "uuid": "f90397bb-b0e8-4816-b756-66b586ef8958"
      }
    ],
    "proxyMode": false,
    "proxyHost": "",
    "proxyRemovePrefix": false,
    "tlsOptions": {
      "enabled": false,
      "type": "CERT",
      "pfxPath": "",
      "certPath": "",
      "keyPath": "",
      "caPath": "",
      "passphrase": ""
    },
    "cors": true,
    "headers": [
      {
        "key": "Content-Type",
        "value": "application/json"
      }
    ],
    "proxyReqHeaders": [
      {
        "key": "",
        "value": ""
      }
    ],
    "proxyResHeaders": [
      {
        "key": "",
        "value": ""
      }
    ],
    "data": []
  }